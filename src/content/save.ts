// /**
//  * –ú–æ–¥—É–ª—å —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó —Å—É–±—Ç–∏—Ç—Ä—ñ–≤ –¥–ª—è content script
//  * –í–∏–Ω–µ—Å–µ–Ω–æ –∑ content.ts –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∫–æ–¥—É
//  */

// import {
//   createCaptionManagerForCurrentPlatform,
//   isCurrentPlatformSupported,
//   getCurrentPlatformInfo,
//   logCaptionEvent,
//   handleCaptionError,
// } from "./caption/index";
// import { CaptionManager } from "./caption/CaptionManager";
// import { showCaptionNotification } from "./uiNotifier";

// // –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
// // let captionManager: CaptionManager | null = null;
// let captionManager: any = null;
// let isCaptionModuleInitialized = false;
// let backupInterval: NodeJS.Timeout | null = null;
// const BACKUP_INTERVAL_MS = 30000; // 30 —Å–µ–∫—É–Ω–¥

// /**
//  * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –º–æ–¥—É–ª—å —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
//  */
// export async function initializeCaptionModule() {
//   try {
//     logCaptionEvent("initialization_started", { url: window.location.href });

//     let isErrorNotificationShown = false;

//     function handleErrorOnce(details: any) {
//       if (!isErrorNotificationShown) {
//         console.error(
//           `A critical error occurred in ${details.context}:`,
//           details.error
//         );
//         isErrorNotificationShown = true;
//       }
//     }

//     // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –ø–æ—Ç–æ—á–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
//     if (!isCurrentPlatformSupported()) {
//       const platformInfo = getCurrentPlatformInfo();
//       console.warn(
//         `Platform not supported: ${platformInfo.name} - ${platformInfo.description}`
//       );
//       return;
//     }

//     // –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
//     captionManager = await createCaptionManagerForCurrentPlatform({
//       autoEnableCaptions: true,
//       autoSaveOnEnd: true,
//       trackAttendees: true,
//       operationMode: "automatic",
//     });

//     captionManager.on("error", handleErrorOnce);

//     // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∞ –≤—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –±–µ–∫–∞–ø –ø—Ä–∏ –≤—Ö–æ–¥—ñ –≤ –∑—É—Å—Ç—Ä—ñ—á
//     await checkAndRecoverBackup();

//     // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
//     setupCaptionEventHandlers();

//     isCaptionModuleInitialized = true;
//     logCaptionEvent("initialization_completed", {
//       platform: getCurrentPlatformInfo().name,
//       adapter: captionManager.currentAdapter?.constructor.name,
//     });

//     // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
//     showCaptionNotification(
//       "Caption module initialized successfully",
//       "success"
//     );
//   } catch (error) {
//     handleCaptionError(
//       error instanceof Error ? error : new Error(String(error)),
//       "initializeCaptionModule"
//     );
//     showCaptionNotification("Failed to initialize caption module", "error");
//   }
// }

// /**
//  * –ù–∞–ª–∞—à—Ç–æ–≤—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è –º–æ–¥—É–ª—è —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
//  */
// function setupCaptionEventHandlers() {
//   if (!captionManager) return;

//   // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –∑–∞–ø–∏—Å—É
//   captionManager.on("recording_started", (data: any) => {
//     console.log("üî¥ [RECORDING STARTED]", {
//       timestamp: data.timestamp,
//       platform: getCurrentPlatformInfo().name,
//       adapter: captionManager.currentAdapter?.constructor.name,
//     });

//     logCaptionEvent("recording_started", data);
//     showCaptionNotification("Recording started", "info");
//     updateBadgeStatus(true);

//     // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ –±–µ–∫–∞–ø–∏
//     startPeriodicBackups();
//   });

//   // –û–±—Ä–æ–±–Ω–∏–∫ —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
//   captionManager.on("captions_enabled", (data: any) => {
//     console.log("üìù [CAPTIONS ENABLED]", {
//       timestamp: data.timestamp,
//       platform: getCurrentPlatformInfo().name,
//     });

//     logCaptionEvent("captions_enabled", data);
//     showCaptionNotification("Captions enabled", "success");
//   });

//   // –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–º–∫–Ω–µ–Ω–Ω—è —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
//   captionManager.on("captions_disabled", (data: any) => {
//     console.log("üìù [CAPTIONS DISABLED]", {
//       timestamp: data.timestamp,
//       platform: getCurrentPlatformInfo().name,
//     });

//     logCaptionEvent("captions_disabled", data);
//     showCaptionNotification("Captions disabled", "warning");
//   });

//   captionManager.on("recording_stopped", (data: any) => {
//     console.log("‚èπÔ∏è [RECORDING STOPPED]", {
//       timestamp: data.timestamp,
//       captionCount: data.captionCount,
//       chatMessageCount: data.chatMessageCount,
//       totalDuration: data.totalDuration,
//     });

//     // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø–∏—Å—É
//     if (data.captionCount > 0) {
//       console.log(
//         `üìä [RECORDING STATS] Captured ${data.captionCount} captions`
//       );

//       // –ü–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 5 —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
//       const captions = captionManager.getCaptions();
//       if (captions.length > 0) {
//         console.log("üìù [LAST CAPTIONS]:");
//         captions.slice(-5).forEach((caption: any, index: number) => {
//           console.log(
//             `  ${captions.length - 5 + index + 1}. ${caption.speaker}: "${
//               caption.text
//             }"`
//           );
//         });
//       }
//     }

//     logCaptionEvent("recording_stopped", data);
//     showCaptionNotification(
//       `Recording stopped. Captured ${data.captionCount} captions`,
//       "info"
//     );
//     updateBadgeStatus(false);

//     // –ó—É–ø–∏–Ω—è—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ –±–µ–∫–∞–ø–∏
//     stopPeriodicBackups();

//     // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö –±—É–¥–µ –≤ saveCaptionDataToBackground)
//     (async () => {
//       await saveCaptionDataToBackground(data);
//     })();
//   });

//   captionManager.on("recording_paused", (data: any) => {
//     console.log("‚è∏Ô∏è [RECORDING PAUSED]", {
//       timestamp: data.timestamp,
//       currentCaptionCount: captionManager.getCaptions().length,
//     });

//     logCaptionEvent("recording_paused", data);
//     showCaptionNotification("Recording paused", "warning");

//     // –ó—É–ø–∏–Ω—è—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ –±–µ–∫–∞–ø–∏ –ø—Ä–∏ –ø–∞—É–∑—ñ
//     stopPeriodicBackups();
//   });

//   captionManager.on("recording_resumed", (data: any) => {
//     console.log("‚ñ∂Ô∏è [RECORDING RESUMED]", {
//       timestamp: data.timestamp,
//       currentCaptionCount: captionManager.getCaptions().length,
//     });

//     logCaptionEvent("recording_resumed", data);
//     showCaptionNotification("Recording resumed", "info");

//     // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ –±–µ–∫–∞–ø–∏ –ø—Ä–∏ —Ä–µ–∑—é–º–µ
//     startPeriodicBackups();
//   });

//   // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
//   captionManager.on("captions_enabled", (data: any) => {
//     logCaptionEvent("captions_enabled", data);
//     showCaptionNotification("Captions enabled", "success");
//   });

//   captionManager.on("captions_disabled", (data: any) => {
//     logCaptionEvent("captions_disabled", data);
//     showCaptionNotification("Captions disabled", "warning");
//   });

//   captionManager.on("caption_added", (data: any) => {
//     // –†–æ–∑—à–∏—Ä–µ–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –Ω–æ–≤–∏—Ö —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
//     console.log("üìù [NEW CAPTION]", {
//       speaker: data.speaker,
//       text: data.text,
//       timestamp: data.timestamp,
//       textLength: data.text.length,
//       id: data.id,
//     });

//     logCaptionEvent("caption_added", {
//       speaker: data.speaker,
//       textLength: data.text.length,
//       text: data.text.substring(0, 100) + (data.text.length > 100 ? "..." : ""), // –ü–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤
//     });

//     // –ü–æ–∫–∞–∑—É—î–º–æ —Å—É–±—Ç–∏—Ç—Ä –≤ –∫–æ–Ω—Å–æ–ª—ñ –∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
//     console.log(`üé§ ${data.speaker}: "${data.text}"`);
//   });

//   captionManager.on("caption_updated", (data: any) => {
//     // –†–æ–∑—à–∏—Ä–µ–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
//     console.log("‚úèÔ∏è [UPDATED CAPTION]", {
//       speaker: data.speaker,
//       text: data.text,
//       timestamp: data.timestamp,
//       textLength: data.text.length,
//       id: data.id,
//     });

//     logCaptionEvent("caption_updated", {
//       speaker: data.speaker,
//       textLength: data.text.length,
//       text: data.text.substring(0, 100) + (data.text.length > 100 ? "..." : ""), // –ü–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤
//     });

//     // –ü–æ–∫–∞–∑—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å—É–±—Ç–∏—Ç—Ä –≤ –∫–æ–Ω—Å–æ–ª—ñ
//     console.log(`üîÑ ${data.speaker}: "${data.text}"`);
//   });

//   // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –µ–∫—Å–ø–æ—Ä—Ç—É
//   captionManager.on("data_exported", (data: any) => {
//     logCaptionEvent("data_exported", data);
//     showCaptionNotification(`Data exported as ${data.format}`, "success");
//   });

//   captionManager.on("data_cleared", (data: any) => {
//     logCaptionEvent("data_cleared", data);
//     showCaptionNotification("Data cleared", "info");
//   });
// }

// /**
//  * –û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –±–µ–π–¥–∂–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
//  */
// // let lastBadgeStatus: boolean | null = null;

// function updateBadgeStatus(isRecording: boolean) {
//   // –£–Ω–∏–∫–∞—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
//   // if (lastBadgeStatus === isRecording) {
//   //   return;
//   // }

//   // lastBadgeStatus = isRecording;

//   try {
//     chrome.runtime.sendMessage({
//       type: "update_badge_status",
//       isRecording: isRecording,
//     });
//   } catch (error) {
//     // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏, —è–∫—â–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–µ
//   }
// }

// /**
//  * –°—Ç–≤–æ—Ä—é—î –±–µ–∫–∞–ø –ø–æ—Ç–æ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö —Å–µ—Å—ñ—ó
//  */
// async function backupCurrentSession() {
//   if (!captionManager || !isCaptionModuleInitialized) {
//     return;
//   }

//   try {
//     const captions = captionManager.getCaptions();
//     const chatMessages = captionManager.getChatMessages();
//     const meetingInfo = captionManager.getMeetingInfo();
//     const recordingState = await captionManager.getRecordingState();

//     // –û—Ç—Ä–∏–º—É—î–º–æ attendeeReport —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
//     let attendeeReport = null;
//     try {
//       if (captionManager.getAttendeeReport) {
//         attendeeReport = await captionManager.getAttendeeReport();
//       }
//     } catch (error) {
//       console.warn("‚ö†Ô∏è [BACKUP] Could not get attendee report:", error);
//     }

//     const backupData = {
//       captions,
//       chatMessages,
//       meetingInfo,
//       attendeeReport,
//       recordingState,
//       timestamp: new Date().toISOString(),
//       url: window.location.href,
//       title: document.title,
//     };

//     const response = await chrome.runtime.sendMessage({
//       type: "backup_caption_data",
//       data: backupData,
//     });

//     if (response?.success) {
//       console.log("üíæ [BACKUP] Session data backed up successfully", {
//         captionCount: captions.length,
//         chatMessageCount: chatMessages.length,
//         timestamp: backupData.timestamp,
//         backupId: response.backupId,
//       });
//     } else {
//       console.error("‚ùå [BACKUP] Backup failed:", response?.error);
//     }
//   } catch (error) {
//     console.error("‚ùå [BACKUP] Failed to backup session data:", error);
//   }
// }

// /**
//  * –ó–∞–ø—É—Å–∫–∞—î –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ –±–µ–∫–∞–ø–∏
//  */
// function startPeriodicBackups() {
//   if (backupInterval) {
//     clearInterval(backupInterval);
//   }

//   backupInterval = setInterval(() => {
//     backupCurrentSession();
//   }, BACKUP_INTERVAL_MS);

//   console.log("üîÑ [BACKUP] Periodic backups started (every 30 seconds)");
// }

// /**
//  * –ó—É–ø–∏–Ω—è—î –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ –±–µ–∫–∞–ø–∏
//  */
// function stopPeriodicBackups() {
//   if (backupInterval) {
//     clearInterval(backupInterval);
//     backupInterval = null;
//     console.log("‚èπÔ∏è [BACKUP] Periodic backups stopped");
//   }
// }

// /**
//  * –û–±—Ä–æ–±–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —ñ–Ω—à–∏—Ö —á–∞—Å—Ç–∏–Ω —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
//  */
// export function handleCaptionMessages(
//   request: any,
//   sender: any,
//   sendResponse: any
// ) {
//   if (!captionManager || !isCaptionModuleInitialized) {
//     sendResponse({ success: false, error: "Caption module not initialized" });
//     return;
//   }

//   switch (request.type) {
//     case "get_caption_status":
//       handleGetCaptionStatus(sendResponse);
//       break;

//     case "start_caption_recording":
//       handleStartCaptionRecording(sendResponse);
//       break;

//     case "stop_caption_recording":
//       handleStopCaptionRecording(sendResponse);
//       break;

//     case "hard_stop_caption_recording":
//       handleHardStopCaptionRecording(request, sendResponse);
//       break;

//     case "pause_caption_recording":
//       handlePauseCaptionRecording(sendResponse);
//       break;

//     case "resume_caption_recording":
//       handleResumeCaptionRecording(sendResponse);
//       break;

//     case "enable_captions":
//       handleEnableCaptions(sendResponse);
//       break;

//     case "disable_captions":
//       handleDisableCaptions(sendResponse);
//       break;

//     case "export_caption_data":
//       handleExportCaptionData(request, sendResponse);
//       break;

//     case "get_captions":
//       handleGetCaptions(sendResponse);
//       break;

//     case "get_meeting_info":
//       handleGetMeetingInfo(sendResponse);
//       break;

//     case "clear_caption_data":
//       handleClearCaptionData(sendResponse);
//       break;

//     case "toggle_caption_subtitles":
//       handleToggleCaptionSubtitles(request, sendResponse);
//       break;

//     case "update_badge_status":
//       handleBadgeStatusUpdate(request, sender);
//       sendResponse({ success: true });
//       break;

//     default:
//       // –Ø–∫—â–æ —Ü–µ –Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä—ñ–≤, –ø–µ—Ä–µ–¥–∞—î–º–æ –¥–∞–ª—ñ
//       return false;
//   }

//   return true; // –í–∫–∞–∑—É—î–º–æ, —â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–æ
// }

// /**
//  * –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
//  */
// function handleToggleCaptionSubtitles(
//   request: any,
//   sendResponse: (response: any) => void
// ) {
//   try {
//     console.log("üéõÔ∏è [UI ACTION] Toggling subtitles...", {
//       enabled: request.data?.enabled,
//       currentState: captionManager?.getCaptions().length || 0,
//     });

//     if (!isCaptionModuleInitialized || !captionManager) {
//       console.error("‚ùå [UI ACTION] Caption module not initialized");
//       sendResponse({ success: false, error: "Caption module not initialized" });
//       return;
//     }

//     const enabled = request.data?.enabled;
//     if (enabled === undefined) {
//       console.error("‚ùå [UI ACTION] Missing enabled parameter");
//       sendResponse({ success: false, error: "Missing enabled parameter" });
//       return;
//     }

//     // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
//     // –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏/—Ö–æ–≤–∞—Ç–∏ –ø–∞–Ω–µ–ª—å —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
//     if (enabled) {
//       console.log("üì∫ [UI ACTION] Showing subtitles panel");
//       showSubtitlesPanel();
//     } else {
//       console.log("üì∫ [UI ACTION] Hiding subtitles panel");
//       hideSubtitlesPanel();
//     }

//     console.log(
//       `‚úÖ [UI ACTION] Subtitles ${
//         enabled ? "enabled" : "disabled"
//       } successfully`
//     );
//     logCaptionEvent("subtitles_toggled", { enabled });
//     sendResponse({ success: true, enabled });
//   } catch (error) {
//     console.error("‚ùå [UI ACTION] Toggle subtitles failed:", error);
//     logCaptionEvent("error", {
//       type: "toggle_subtitles_failed",
//       error: error instanceof Error ? error.message : String(error),
//     });
//     sendResponse({
//       success: false,
//       error: error instanceof Error ? error.message : String(error),
//     });
//   }
// }

// // –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–∞–Ω–µ–ª–ª—é —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
// function showSubtitlesPanel() {
//   // –õ–æ–≥—ñ–∫–∞ –ø–æ–∫–∞–∑—É –ø–∞–Ω–µ–ª—ñ —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
//   console.log("üì∫ Showing subtitles panel");
//   // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –ø–æ–∫–∞–∑—É FloatPanelSubtitles
// }

// function hideSubtitlesPanel() {
//   // –õ–æ–≥—ñ–∫–∞ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
//   console.log("üì∫ Hiding subtitles panel");
//   // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è FloatPanelSubtitles
// }

// /**
//  * –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
//  */
// async function handleGetCaptionStatus(sendResponse: any) {
//   try {
//     console.log("üìä [UI ACTION] Getting caption status...");

//     const recordingState = await captionManager.getRecordingState();
//     const isInMeeting = await captionManager.isInMeeting();
//     const isCaptionsEnabled = await captionManager.isCaptionsEnabled();
//     const captions = captionManager.getCaptions();
//     const chatMessages = captionManager.getChatMessages();

//     const status = {
//       isInitialized: true,
//       isInMeeting,
//       isCaptionsEnabled,
//       recordingState,
//       platform: getCurrentPlatformInfo().name,
//       captionCount: captions.length,
//       chatMessageCount: chatMessages.length,
//     };

//     console.log("üìä [UI ACTION] Caption status:", status);

//     sendResponse({
//       success: true,
//       data: status,
//     });
//   } catch (error) {
//     console.error("‚ùå [UI ACTION] Get caption status failed:", error);
//     sendResponse({
//       success: false,
//       error: error instanceof Error ? error.message : String(error),
//     });
//   }
// }

// async function handleStartCaptionRecording(sendResponse: any) {
//   try {
//     console.log("üé¨ [UI ACTION] Starting caption recording...");
//     const result = await captionManager.startRecording();

//     console.log("‚úÖ [UI ACTION] Start recording result:", {
//       success: result.success,
//       message: result.message,
//       error: result.error,
//       warning: result.warning,
//     });

//     // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ —Å—É–±—Ç–∏—Ç—Ä–∏, —è–∫—â–æ —î
//     if (result.warning) {
//       showCaptionNotification(result.warning, "warning");
//     }

//     sendResponse({
//       success: result.success,
//       data: result,
//       error: result.error,
//       warning: result.warning,
//     });
//   } catch (error) {
//     console.error("‚ùå [UI ACTION] Start recording failed:", error);
//     sendResponse({
//       success: false,
//       error: error instanceof Error ? error.message : String(error),
//     });
//   }
// }

// async function handleStopCaptionRecording(sendResponse: any) {
//   try {
//     console.log("‚èπÔ∏è [UI ACTION] Stopping caption recording...");
//     const result = await captionManager.stopRecording();

//     console.log("‚úÖ [UI ACTION] Stop recording result:", {
//       success: result.success,
//       message: result.message,
//       error: result.error,
//     });

//     sendResponse({
//       success: result.success,
//       data: result,
//       error: result.error,
//     });
//   } catch (error) {
//     console.error("‚ùå [UI ACTION] Stop recording failed:", error);
//     sendResponse({
//       success: false,
//       error: error instanceof Error ? error.message : String(error),
//     });
//   }
// }

// async function handleHardStopCaptionRecording(request: any, sendResponse: any) {
//   try {
//     console.log(
//       "üóëÔ∏è [UI ACTION] Hard stopping caption recording and clearing all data...",
//       {
//         clearData: request.data?.clearData,
//         clearBackup: request.data?.clearBackup,
//         forceStop: request.data?.forceStop,
//       }
//     );

//     // –ó—É–ø–∏–Ω—è—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ –±–µ–∫–∞–ø–∏
//     stopPeriodicBackups();

//     // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –º–µ–Ω–µ–¥–∂–µ—Ä
//     if (!captionManager) {
//       console.warn("‚ö†Ô∏è [HARD STOP] Caption manager not initialized");
//       sendResponse({
//         success: true,
//         data: { message: "No active recording to stop" }
//       });
//       return;
//     }

//     // –Ø–∫—â–æ –π–¥–µ –∑–∞–ø–∏—Å, —Å–ø–æ—á–∞—Ç–∫—É –∑—É–ø–∏–Ω—è—î–º–æ –π–æ–≥–æ (–∞–ª–µ –±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è)
//     if (isCaptionModuleInitialized) {
//       try {
//         const recordingState = await captionManager.getRecordingState();
//         // if (recordingState.isRecording) {
//           // –ü—Ä–∏–º—É—Å–æ–≤–æ –∑—É–ø–∏–Ω—è—î–º–æ –∑–∞–ø–∏—Å –±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
//           console.log("üõë [HARD STOP] Force stopping active recording...");
//           // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∑—É–ø–∏–Ω–∫–∏ –±–µ–∑ –≤–∏–∫–ª–∏–∫—É stopRecording()
//           captionManager.isRecording = false;
//           captionManager.isPaused = false;
//         // }
//       } catch (error) {
//         console.warn("‚ö†Ô∏è [HARD STOP] Could not check recording state:", error);
//       }
//     }

//     // –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
//     if (request.data?.clearData) {
//       try {
//         // –°–ø–æ—á–∞—Ç–∫—É –æ—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ
//         await captionManager.clearData();
//         console.log("ÔøΩÔøΩ [HARD STOP] Caption data cleared from manager");

//         // // –ü–æ—Ç—ñ–º –æ—á–∏—â–∞—î–º–æ —Ä–µ—Å—É—Ä—Å–∏ (—Ü–µ —Ç–∞–∫–æ–∂ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç—å adapter = null)
//         // await captionManager.cleanup();
//         // console.log("üßπ [HARD STOP] Adapter resources cleaned up");

//         // // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞
//         // captionManager = null;
//         // isCaptionModuleInitialized = false;
//         console.log("üßπ [HARD STOP] Caption manager state reset");
//       } catch (error) {
//         console.error("‚ùå [HARD STOP] Failed to clear caption data:", error);
//         // –ù–∞–≤—ñ—Ç—å —è–∫—â–æ –æ—á–∏—â–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è, —Å–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
//         captionManager = null;
//         isCaptionModuleInitialized = false;
//       }
//     }

//     // –û—á–∏—â–∞—î–º–æ backup –≤ background
//     if (request.data?.clearBackup) {
//       try {
//         const clearResponse = await chrome.runtime.sendMessage({
//           type: "clear_caption_backup",
//         });

//         if (clearResponse?.success) {
//           console.log("ÔøΩÔøΩ [HARD STOP] Backup cleared successfully");
//         } else {
//           console.error(
//             "‚ùå [HARD STOP] Failed to clear backup:",
//             clearResponse?.error
//           );
//         }
//       } catch (error) {
//         console.error("‚ùå [HARD STOP] Failed to clear backup:", error);
//       }
//     }

//     // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –±–µ–π–¥–∂–∞
//     updateBadgeStatus(false);

//     console.log("‚úÖ [HARD STOP] Hard stop completed successfully");
//     logCaptionEvent("hard_stop_completed", {
//       clearData: request.data?.clearData,
//       clearBackup: request.data?.clearBackup,
//       forceStop: request.data?.forceStop,
//     });

//     sendResponse({
//       success: true,
//       data: {
//         recordingStopped: true,
//         clearedData: request.data?.clearData,
//         clearedBackup: request.data?.clearBackup,
//         timestamp: new Date().toISOString(),
//       },
//     });
//   } catch (error) {
//     console.error("‚ùå [HARD STOP] Hard stop failed:", error);
//     logCaptionEvent("error", {
//       type: "hard_stop_failed",
//       error: error instanceof Error ? error.message : String(error),
//     });
//     sendResponse({
//       success: false,
//       error: error instanceof Error ? error.message : String(error),
//     });
//   }
// }

// async function handlePauseCaptionRecording(sendResponse: any) {
//   try {
//     console.log("‚è∏Ô∏è [UI ACTION] Pausing caption recording...");
//     const result = await captionManager.pauseRecording();

//     console.log("‚úÖ [UI ACTION] Pause recording result:", {
//       success: result.success,
//       message: result.message,
//       error: result.error,
//     });

//     sendResponse({
//       success: result.success,
//       data: result,
//       error: result.error,
//     });
//   } catch (error) {
//     console.error("‚ùå [UI ACTION] Pause recording failed:", error);
//     sendResponse({
//       success: false,
//       error: error instanceof Error ? error.message : String(error),
//     });
//   }
// }

// async function handleResumeCaptionRecording(sendResponse: any) {
//   try {
//     console.log("‚ñ∂Ô∏è [UI ACTION] Resuming caption recording...");
//     const result = await captionManager.resumeRecording();

//     console.log("‚úÖ [UI ACTION] Resume recording result:", {
//       success: result.success,
//       message: result.message,
//       error: result.error,
//     });

//     sendResponse({
//       success: result.success,
//       data: result,
//       error: result.error,
//     });
//   } catch (error) {
//     console.error("‚ùå [UI ACTION] Resume recording failed:", error);
//     sendResponse({
//       success: false,
//       error: error instanceof Error ? error.message : String(error),
//     });
//   }
// }

// async function handleEnableCaptions(sendResponse: any) {
//   try {
//     const result = await captionManager.enableCaptions();
//     sendResponse({
//       success: result.success,
//       data: result,
//       error: result.error,
//     });
//   } catch (error) {
//     sendResponse({
//       success: false,
//       error: error instanceof Error ? error.message : String(error),
//     });
//   }
// }

// async function handleDisableCaptions(sendResponse: any) {
//   try {
//     const result = await captionManager.disableCaptions();
//     sendResponse({
//       success: result.success,
//       data: result,
//       error: result.error,
//     });
//   } catch (error) {
//     sendResponse({
//       success: false,
//       error: error instanceof Error ? error.message : String(error),
//     });
//   }
// }


// function handleGetCaptions(sendResponse: any) {
//   try {
//     const captions = captionManager.getCaptions();
//     const chatMessages = captionManager.getChatMessages();

//     sendResponse({
//       success: true,
//       data: {
//         captions,
//         chatMessages,
//         count: captions.length,
//       },
//     });
//   } catch (error) {
//     sendResponse({
//       success: false,
//       error: error instanceof Error ? error.message : String(error),
//     });
//   }
// }

// function handleGetMeetingInfo(sendResponse: any) {
//   try {
//     const meetingInfo = captionManager.getMeetingInfo();
//     sendResponse({
//       success: true,
//       data: meetingInfo,
//     });
//   } catch (error) {
//     sendResponse({
//       success: false,
//       error: error instanceof Error ? error.message : String(error),
//     });
//   }
// }

// async function handleClearCaptionData(sendResponse: any) {
//   try {
//     const result = await captionManager.clearData();
//     sendResponse(result);
//   } catch (error) {
//     sendResponse({
//       success: false,
//       error: error instanceof Error ? error.message : String(error),
//     });
//   }
// }

// /**
//  * –û—á–∏—â–∞—î —Ä–µ—Å—É—Ä—Å–∏ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
//  */
// export async function cleanupCaptionModule() {
//   if (captionManager) {
//     try {
//       // –ó—É–ø–∏–Ω—è—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ –±–µ–∫–∞–ø–∏
//       stopPeriodicBackups();

//       await captionManager.cleanup();
//       captionManager = null;
//       isCaptionModuleInitialized = false;
//       logCaptionEvent("cleanup_completed", {});
//     } catch (error) {
//       handleCaptionError(
//         error instanceof Error ? error : new Error(String(error)),
//         "cleanup"
//       );
//     }
//   }
// }

// /**
//  * –ü—Ä–∏–º—É—Å–æ–≤–æ —Å—Ç–≤–æ—Ä—é—î –±–µ–∫–∞–ø –ø–æ—Ç–æ—á–Ω–æ—ó —Å–µ—Å—ñ—ó. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –≤–∫–ª–∞–¥–∫–∏.
//  * –ó–±–µ—Ä—ñ–≥–∞—î –¥–∞–Ω—ñ –≤ BACKUP –¥–ª—è –º–æ–∂–ª–∏–≤–æ–≥–æ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É.
//  */
// export async function triggerAutoSave() {
//   if (captionManager) {
//     const state = await captionManager.getRecordingState();
//     if ((state.isRecording || state.isPaused) && state.captionCount > 0) {
//       console.log("Triggering backup on page unload...");
//       await backupCurrentSession();

//       // –î–æ–¥–∞—î–º–æ –±–µ–∫–∞–ø –≤ —ñ—Å—Ç–æ—Ä—ñ—é —è–∫ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å
//       await addBackupToHistory();
//     }
//   }
// }

// /**
//  * –î–æ–¥–∞—î –±–µ–∫–∞–ø –≤ —ñ—Å—Ç–æ—Ä—ñ—é —è–∫ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å
//  */
// async function addBackupToHistory() {
//   try {
//     const response = await chrome.runtime.sendMessage({
//       type: "add_backup_to_history",
//     });

//     if (response?.success) {
//       if (response.skipped) {
//         console.log("‚ö†Ô∏è [BACKUP] Backup skipped (no data):", response.reason);
//       } else {
//         console.log("‚úÖ [BACKUP] Backup added to history");
//       }
//     } else {
//       console.error(
//         "‚ùå [BACKUP] Failed to add backup to history:",
//         response?.error
//       );
//     }
//   } catch (error) {
//     console.error("‚ùå [BACKUP] Failed to add backup to history:", error);
//   }
// }

// /**
//  * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ç–∞ –≤—ñ–¥–Ω–æ–≤–ª—é—î –±–µ–∫–∞–ø –ø—Ä–∏ –≤—Ö–æ–¥—ñ –≤ –∑—É—Å—Ç—Ä—ñ—á
//  */
// export async function checkAndRecoverBackup() {
//   try {
//     console.log("üîÑ [RECOVERY] Checking backup recovery...");

//     const response = await chrome.runtime.sendMessage({
//       type: "check_backup_recovery",
//       currentUrl: window.location.href,
//     });

//     console.log("üîÑ [RECOVERY] Backup recovery response:", response);

//     if (response?.success && response.shouldRecover) {
//       console.log("üîÑ [RECOVERY] Recovering backup for same meeting:", {
//         source: response.source,
//         captionCount: response.data?.captions?.length || 0,
//         meetingUrl: response.data?.url,
//       });

//       // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
//       if (captionManager) {
//         captionManager.hydrate(response.data);
//         if (response.data?.captions?.length) {
//           showCaptionNotification(
//             `Recovered ${
//               response.data?.captions?.length || 0
//             } captions from previous session`,
//             "success"
//           );
//         }
//       }
//     } else if (response?.success && response.clearedBackup) {
//       console.log("üßπ [CLEANUP] Cleared backup for different meeting");
//     } else {
//       console.log("üîÑ [RECOVERY] No backup recovery");
//     }
//   } catch (error) {
//     console.error("‚ùå [RECOVERY] Failed to check backup recovery:", error);
//   }
// }
