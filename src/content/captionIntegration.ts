/**
 * –ú–æ–¥—É–ª—å —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó —Å—É–±—Ç–∏—Ç—Ä—ñ–≤ –¥–ª—è content script
 * –í–∏–Ω–µ—Å–µ–Ω–æ –∑ content.ts –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∫–æ–¥—É
 */

import {
  createCaptionManagerForCurrentPlatform,
  isCurrentPlatformSupported,
  getCurrentPlatformInfo,
  logCaptionEvent,
  handleCaptionError,
} from "./caption/index";

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
let captionManager: any = null;
let isCaptionModuleInitialized = false;

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –º–æ–¥—É–ª—å —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
 */
export async function initializeCaptionModule() {
  try {
    logCaptionEvent("initialization_started", { url: window.location.href });

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –ø–æ—Ç–æ—á–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
    if (!isCurrentPlatformSupported()) {
      const platformInfo = getCurrentPlatformInfo();
      console.warn(
        `Platform not supported: ${platformInfo.name} - ${platformInfo.description}`
      );
      return;
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
    captionManager = await createCaptionManagerForCurrentPlatform({
      autoEnableCaptions: true,
      autoSaveOnEnd: true,
      trackAttendees: true,
      operationMode: "automatic",
    });

    // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    setupCaptionEventHandlers();

    isCaptionModuleInitialized = true;
    logCaptionEvent("initialization_completed", {
      platform: getCurrentPlatformInfo().name,
      adapter: captionManager.currentAdapter?.constructor.name,
    });

    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    showCaptionNotification(
      "Caption module initialized successfully",
      "success"
    );
  } catch (error) {
    handleCaptionError(
      error instanceof Error ? error : new Error(String(error)),
      "initializeCaptionModule"
    );
    showCaptionNotification("Failed to initialize caption module", "error");
  }
}

/**
 * –ù–∞–ª–∞—à—Ç–æ–≤—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è –º–æ–¥—É–ª—è —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
 */
function setupCaptionEventHandlers() {
  if (!captionManager) return;

  // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –∑–∞–ø–∏—Å—É
  captionManager.on("recording_started", (data: any) => {
    console.log("üî¥ [RECORDING STARTED]", {
      timestamp: data.timestamp,
      platform: getCurrentPlatformInfo().name,
      adapter: captionManager.currentAdapter?.constructor.name,
    });

    logCaptionEvent("recording_started", data);
    showCaptionNotification("Recording started", "info");
    updateBadgeStatus(true);
  });

  captionManager.on("recording_stopped", (data: any) => {
    console.log("‚èπÔ∏è [RECORDING STOPPED]", {
      timestamp: data.timestamp,
      captionCount: data.captionCount,
      chatMessageCount: data.chatMessageCount,
      totalDuration: data.totalDuration,
    });

    // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø–∏—Å—É
    if (data.captionCount > 0) {
      console.log(
        `üìä [RECORDING STATS] Captured ${data.captionCount} captions`
      );

      // –ü–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 5 —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
      const captions = captionManager.getCaptions();
      if (captions.length > 0) {
        console.log("üìù [LAST CAPTIONS]:");
        captions.slice(-5).forEach((caption: any, index: number) => {
          console.log(
            `  ${captions.length - 5 + index + 1}. ${caption.speaker}: "${
              caption.text
            }"`
          );
        });
      }
    }

    logCaptionEvent("recording_stopped", data);
    showCaptionNotification(
      `Recording stopped. Captured ${data.captionCount} captions`,
      "info"
    );
    updateBadgeStatus(false);

    // –î–û–î–ê–¢–ò: –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    if (data.captionCount > 0) {
      saveCaptionDataToBackground(data);
    }
  });

  captionManager.on("recording_paused", (data: any) => {
    console.log("‚è∏Ô∏è [RECORDING PAUSED]", {
      timestamp: data.timestamp,
      currentCaptionCount: captionManager.getCaptions().length,
    });

    logCaptionEvent("recording_paused", data);
    showCaptionNotification("Recording paused", "warning");
  });

  captionManager.on("recording_resumed", (data: any) => {
    console.log("‚ñ∂Ô∏è [RECORDING RESUMED]", {
      timestamp: data.timestamp,
      currentCaptionCount: captionManager.getCaptions().length,
    });

    logCaptionEvent("recording_resumed", data);
    showCaptionNotification("Recording resumed", "info");
  });

  // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
  captionManager.on("captions_enabled", (data: any) => {
    logCaptionEvent("captions_enabled", data);
    showCaptionNotification("Captions enabled", "success");
  });

  captionManager.on("captions_disabled", (data: any) => {
    logCaptionEvent("captions_disabled", data);
    showCaptionNotification("Captions disabled", "warning");
  });

  captionManager.on("caption_added", (data: any) => {
    // –†–æ–∑—à–∏—Ä–µ–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –Ω–æ–≤–∏—Ö —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
    console.log("üìù [NEW CAPTION]", {
      speaker: data.speaker,
      text: data.text,
      timestamp: data.timestamp,
      textLength: data.text.length,
      id: data.id,
    });

    logCaptionEvent("caption_added", {
      speaker: data.speaker,
      textLength: data.text.length,
      text: data.text.substring(0, 100) + (data.text.length > 100 ? "..." : ""), // –ü–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤
    });

    // –ü–æ–∫–∞–∑—É—î–º–æ —Å—É–±—Ç–∏—Ç—Ä –≤ –∫–æ–Ω—Å–æ–ª—ñ –∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
    console.log(`üé§ ${data.speaker}: "${data.text}"`);
  });

  captionManager.on("caption_updated", (data: any) => {
    // –†–æ–∑—à–∏—Ä–µ–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
    console.log("‚úèÔ∏è [UPDATED CAPTION]", {
      speaker: data.speaker,
      text: data.text,
      timestamp: data.timestamp,
      textLength: data.text.length,
      id: data.id,
    });

    logCaptionEvent("caption_updated", {
      speaker: data.speaker,
      textLength: data.text.length,
      text: data.text.substring(0, 100) + (data.text.length > 100 ? "..." : ""), // –ü–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤
    });

    // –ü–æ–∫–∞–∑—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å—É–±—Ç–∏—Ç—Ä –≤ –∫–æ–Ω—Å–æ–ª—ñ
    console.log(`üîÑ ${data.speaker}: "${data.text}"`);
  });

  // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –µ–∫—Å–ø–æ—Ä—Ç—É
  captionManager.on("data_exported", (data: any) => {
    logCaptionEvent("data_exported", data);
    showCaptionNotification(`Data exported as ${data.format}`, "success");
  });

  captionManager.on("data_cleared", (data: any) => {
    logCaptionEvent("data_cleared", data);
    showCaptionNotification("Data cleared", "info");
  });
}

/**
 * –ü–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ —Å—Ç–∞–Ω —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
 */
function showCaptionNotification(
  message: string,
  type: "success" | "error" | "warning" | "info" = "info"
) {
  const notification = document.createElement("div");
  notification.className = `caption-notification caption-notification-${type}`;
  notification.textContent = message;

  // –°—Ç–∏–ª—ñ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
  notification.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    padding: 12px 16px;
    border-radius: 8px;
    color: white;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    font-size: 14px;
    font-weight: 500;
    z-index: 10000;
    max-width: 300px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    transition: all 0.3s ease;
  `;

  // –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
  const colors = {
    success: "#10B981",
    error: "#EF4444",
    warning: "#F59E0B",
    info: "#3B82F6",
  };

  notification.style.backgroundColor = colors[type] || colors.info;

  document.body.appendChild(notification);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    notification.style.opacity = "0";
    notification.style.transform = "translateX(100%)";
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 300);
  }, 5000);
}

/**
 * –û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –±–µ–π–¥–∂–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
 */
function updateBadgeStatus(isRecording: boolean) {
  try {
    chrome.runtime.sendMessage({
      type: "update_badge_status",
      isRecording: isRecording,
    });
  } catch (error) {
    // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏, —è–∫—â–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–µ
  }
}

/**
 * –û–±—Ä–æ–±–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —ñ–Ω—à–∏—Ö —á–∞—Å—Ç–∏–Ω —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
 */
export function handleCaptionMessages(
  request: any,
  sender: any,
  sendResponse: any
) {
  if (!captionManager || !isCaptionModuleInitialized) {
    sendResponse({ success: false, error: "Caption module not initialized" });
    return;
  }

  switch (request.type) {
    case "get_caption_status":
      handleGetCaptionStatus(sendResponse);
      break;

    case "start_caption_recording":
      handleStartCaptionRecording(sendResponse);
      break;

    case "stop_caption_recording":
      handleStopCaptionRecording(sendResponse);
      break;

    case "pause_caption_recording":
      handlePauseCaptionRecording(sendResponse);
      break;

    case "resume_caption_recording":
      handleResumeCaptionRecording(sendResponse);
      break;

    case "enable_captions":
      handleEnableCaptions(sendResponse);
      break;

    case "disable_captions":
      handleDisableCaptions(sendResponse);
      break;

    case "export_caption_data":
      handleExportCaptionData(request, sendResponse);
      break;

    case "get_captions":
      handleGetCaptions(sendResponse);
      break;

    case "get_meeting_info":
      handleGetMeetingInfo(sendResponse);
      break;

    case "clear_caption_data":
      handleClearCaptionData(sendResponse);
      break;

    case "toggle_caption_subtitles":
      handleToggleCaptionSubtitles(request, sendResponse);
      break;

    case "update_badge_status":
      handleBadgeStatusUpdate(request, sender);
      sendResponse({ success: true });
      break;

    default:
      // –Ø–∫—â–æ —Ü–µ –Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä—ñ–≤, –ø–µ—Ä–µ–¥–∞—î–º–æ –¥–∞–ª—ñ
      return false;
  }

  return true; // –í–∫–∞–∑—É—î–º–æ, —â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–æ
}

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
 */
function handleToggleCaptionSubtitles(
  request: any,
  sendResponse: (response: any) => void
) {
  try {
    console.log("üéõÔ∏è [UI ACTION] Toggling subtitles...", {
      enabled: request.data?.enabled,
      currentState: captionManager?.getCaptions().length || 0,
    });

    if (!isCaptionModuleInitialized || !captionManager) {
      console.error("‚ùå [UI ACTION] Caption module not initialized");
      sendResponse({ success: false, error: "Caption module not initialized" });
      return;
    }

    const enabled = request.data?.enabled;
    if (enabled === undefined) {
      console.error("‚ùå [UI ACTION] Missing enabled parameter");
      sendResponse({ success: false, error: "Missing enabled parameter" });
      return;
    }

    // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
    // –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏/—Ö–æ–≤–∞—Ç–∏ –ø–∞–Ω–µ–ª—å —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
    if (enabled) {
      console.log("üì∫ [UI ACTION] Showing subtitles panel");
      showSubtitlesPanel();
    } else {
      console.log("üì∫ [UI ACTION] Hiding subtitles panel");
      hideSubtitlesPanel();
    }

    console.log(
      `‚úÖ [UI ACTION] Subtitles ${
        enabled ? "enabled" : "disabled"
      } successfully`
    );
    logCaptionEvent("subtitles_toggled", { enabled });
    sendResponse({ success: true, enabled });
  } catch (error) {
    console.error("‚ùå [UI ACTION] Toggle subtitles failed:", error);
    logCaptionEvent("error", {
      type: "toggle_subtitles_failed",
      error: error instanceof Error ? error.message : String(error),
    });
    sendResponse({
      success: false,
      error: error instanceof Error ? error.message : String(error),
    });
  }
}

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–∞–Ω–µ–ª–ª—é —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
function showSubtitlesPanel() {
  // –õ–æ–≥—ñ–∫–∞ –ø–æ–∫–∞–∑—É –ø–∞–Ω–µ–ª—ñ —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
  console.log("üì∫ Showing subtitles panel");
  // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –ø–æ–∫–∞–∑—É FloatPanelSubtitles
}

function hideSubtitlesPanel() {
  // –õ–æ–≥—ñ–∫–∞ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
  console.log("üì∫ Hiding subtitles panel");
  // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è FloatPanelSubtitles
}

/**
 * –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
 */
async function handleGetCaptionStatus(sendResponse: any) {
  try {
    console.log("üìä [UI ACTION] Getting caption status...");

    const recordingState = await captionManager.getRecordingState();
    const isInMeeting = await captionManager.isInMeeting();
    const isCaptionsEnabled = await captionManager.isCaptionsEnabled();
    const captions = captionManager.getCaptions();
    const chatMessages = captionManager.getChatMessages();

    const status = {
      isInitialized: true,
      isInMeeting,
      isCaptionsEnabled,
      recordingState,
      platform: getCurrentPlatformInfo().name,
      captionCount: captions.length,
      chatMessageCount: chatMessages.length,
    };

    console.log("üìä [UI ACTION] Caption status:", status);

    sendResponse({
      success: true,
      data: status,
    });
  } catch (error) {
    console.error("‚ùå [UI ACTION] Get caption status failed:", error);
    sendResponse({
      success: false,
      error: error instanceof Error ? error.message : String(error),
    });
  }
}

async function handleStartCaptionRecording(sendResponse: any) {
  try {
    console.log("üé¨ [UI ACTION] Starting caption recording...");
    const result = await captionManager.startRecording();

    console.log("‚úÖ [UI ACTION] Start recording result:", {
      success: result.success,
      message: result.message,
      error: result.error,
    });

    sendResponse({
      success: result.success,
      data: result,
      error: result.error,
    });
  } catch (error) {
    console.error("‚ùå [UI ACTION] Start recording failed:", error);
    sendResponse({
      success: false,
      error: error instanceof Error ? error.message : String(error),
    });
  }
}

async function handleStopCaptionRecording(sendResponse: any) {
  try {
    console.log("‚èπÔ∏è [UI ACTION] Stopping caption recording...");
    const result = await captionManager.stopRecording();

    console.log("‚úÖ [UI ACTION] Stop recording result:", {
      success: result.success,
      message: result.message,
      error: result.error,
    });

    sendResponse({
      success: result.success,
      data: result,
      error: result.error,
    });
  } catch (error) {
    console.error("‚ùå [UI ACTION] Stop recording failed:", error);
    sendResponse({
      success: false,
      error: error instanceof Error ? error.message : String(error),
    });
  }
}

async function handlePauseCaptionRecording(sendResponse: any) {
  try {
    console.log("‚è∏Ô∏è [UI ACTION] Pausing caption recording...");
    const result = await captionManager.pauseRecording();

    console.log("‚úÖ [UI ACTION] Pause recording result:", {
      success: result.success,
      message: result.message,
      error: result.error,
    });

    sendResponse({
      success: result.success,
      data: result,
      error: result.error,
    });
  } catch (error) {
    console.error("‚ùå [UI ACTION] Pause recording failed:", error);
    sendResponse({
      success: false,
      error: error instanceof Error ? error.message : String(error),
    });
  }
}

async function handleResumeCaptionRecording(sendResponse: any) {
  try {
    console.log("‚ñ∂Ô∏è [UI ACTION] Resuming caption recording...");
    const result = await captionManager.resumeRecording();

    console.log("‚úÖ [UI ACTION] Resume recording result:", {
      success: result.success,
      message: result.message,
      error: result.error,
    });

    sendResponse({
      success: result.success,
      data: result,
      error: result.error,
    });
  } catch (error) {
    console.error("‚ùå [UI ACTION] Resume recording failed:", error);
    sendResponse({
      success: false,
      error: error instanceof Error ? error.message : String(error),
    });
  }
}

async function handleEnableCaptions(sendResponse: any) {
  try {
    const result = await captionManager.enableCaptions();
    sendResponse({
      success: result.success,
      data: result,
      error: result.error,
    });
  } catch (error) {
    sendResponse({
      success: false,
      error: error instanceof Error ? error.message : String(error),
    });
  }
}

async function handleDisableCaptions(sendResponse: any) {
  try {
    const result = await captionManager.disableCaptions();
    sendResponse({
      success: result.success,
      data: result,
      error: result.error,
    });
  } catch (error) {
    sendResponse({
      success: false,
      error: error instanceof Error ? error.message : String(error),
    });
  }
}

async function handleExportCaptionData(request: any, sendResponse: any) {
  try {
    const result = await captionManager.exportData(
      request.format,
      request.options
    );
    sendResponse(result);
  } catch (error) {
    sendResponse({
      success: false,
      error: error instanceof Error ? error.message : String(error),
    });
  }
}

function handleGetCaptions(sendResponse: any) {
  try {
    const captions = captionManager.getCaptions();
    const chatMessages = captionManager.getChatMessages();

    sendResponse({
      success: true,
      data: {
        captions,
        chatMessages,
        count: captions.length,
      },
    });
  } catch (error) {
    sendResponse({
      success: false,
      error: error instanceof Error ? error.message : String(error),
    });
  }
}

function handleGetMeetingInfo(sendResponse: any) {
  try {
    const meetingInfo = captionManager.getMeetingInfo();
    sendResponse({
      success: true,
      data: meetingInfo,
    });
  } catch (error) {
    sendResponse({
      success: false,
      error: error instanceof Error ? error.message : String(error),
    });
  }
}

async function handleClearCaptionData(sendResponse: any) {
  try {
    const result = await captionManager.clearData();
    sendResponse(result);
  } catch (error) {
    sendResponse({
      success: false,
      error: error instanceof Error ? error.message : String(error),
    });
  }
}

/**
 * –û—á–∏—â–∞—î —Ä–µ—Å—É—Ä—Å–∏ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
 */
export async function cleanupCaptionModule() {
  if (captionManager) {
    try {
      await captionManager.cleanup();
      captionManager = null;
      isCaptionModuleInitialized = false;
      logCaptionEvent("cleanup_completed", {});
    } catch (error) {
      handleCaptionError(
        error instanceof Error ? error : new Error(String(error)),
        "cleanup"
      );
    }
  }
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –º–æ–¥—É–ª—å —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
 */
export function isCaptionModuleReady(): boolean {
  return isCaptionModuleInitialized && captionManager !== null;
}

/**
 * –û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
 */
export function getCaptionManager(): any {
  return captionManager;
}

async function saveCaptionDataToBackground(data: any) {
  try {
    const captions = captionManager.getCaptions();
    const chatMessages = captionManager.getChatMessages();
    const meetingInfo = captionManager.getMeetingInfo();

    await chrome.runtime.sendMessage({
      type: "save_caption_data",
      captions: captions,
      chatMessages: chatMessages,
      meetingInfo: meetingInfo,
      attendeeReport: data.attendeeReport || null,
    });

    console.log("‚úÖ Caption data saved automatically");
  } catch (error) {
    console.error("‚ùå Failed to save caption data:", error);
  }
}

function handleBadgeStatusUpdate(
  message: any,
  sender: chrome.runtime.MessageSender
) {
  if (sender.tab?.id) {
    chrome.action.setBadgeText({
      text: message.isRecording ? "REC" : "",
      tabId: sender.tab.id,
    });

    chrome.action.setBadgeBackgroundColor({
      color: message.isRecording ? "#f59e0b" : "#10b981",
      tabId: sender.tab.id,
    });
  }
}
